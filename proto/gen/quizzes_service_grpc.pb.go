// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: quizzes_service.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuizzesServiceClient is the client API for QuizzesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuizzesServiceClient interface {
	GetListTopics(ctx context.Context, in *GetListTopicsRequest, opts ...grpc.CallOption) (*GetListTopicsResponse, error)
	GetListQuizzes(ctx context.Context, in *GetListQuizzesRequest, opts ...grpc.CallOption) (*GetListQuizzesResponse, error)
	StartQuiz(ctx context.Context, in *StartQuizRequest, opts ...grpc.CallOption) (*StartQuizResponse, error)
	SubmitQuiz(ctx context.Context, in *SubmitQuizRequest, opts ...grpc.CallOption) (*SubmitQuizResponse, error)
}

type quizzesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizzesServiceClient(cc grpc.ClientConnInterface) QuizzesServiceClient {
	return &quizzesServiceClient{cc}
}

func (c *quizzesServiceClient) GetListTopics(ctx context.Context, in *GetListTopicsRequest, opts ...grpc.CallOption) (*GetListTopicsResponse, error) {
	out := new(GetListTopicsResponse)
	err := c.cc.Invoke(ctx, "/go.todoapp.proto.task.QuizzesService/GetListTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizzesServiceClient) GetListQuizzes(ctx context.Context, in *GetListQuizzesRequest, opts ...grpc.CallOption) (*GetListQuizzesResponse, error) {
	out := new(GetListQuizzesResponse)
	err := c.cc.Invoke(ctx, "/go.todoapp.proto.task.QuizzesService/GetListQuizzes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizzesServiceClient) StartQuiz(ctx context.Context, in *StartQuizRequest, opts ...grpc.CallOption) (*StartQuizResponse, error) {
	out := new(StartQuizResponse)
	err := c.cc.Invoke(ctx, "/go.todoapp.proto.task.QuizzesService/StartQuiz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizzesServiceClient) SubmitQuiz(ctx context.Context, in *SubmitQuizRequest, opts ...grpc.CallOption) (*SubmitQuizResponse, error) {
	out := new(SubmitQuizResponse)
	err := c.cc.Invoke(ctx, "/go.todoapp.proto.task.QuizzesService/SubmitQuiz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuizzesServiceServer is the server API for QuizzesService service.
// All implementations should embed UnimplementedQuizzesServiceServer
// for forward compatibility
type QuizzesServiceServer interface {
	GetListTopics(context.Context, *GetListTopicsRequest) (*GetListTopicsResponse, error)
	GetListQuizzes(context.Context, *GetListQuizzesRequest) (*GetListQuizzesResponse, error)
	StartQuiz(context.Context, *StartQuizRequest) (*StartQuizResponse, error)
	SubmitQuiz(context.Context, *SubmitQuizRequest) (*SubmitQuizResponse, error)
}

// UnimplementedQuizzesServiceServer should be embedded to have forward compatible implementations.
type UnimplementedQuizzesServiceServer struct {
}

func (UnimplementedQuizzesServiceServer) GetListTopics(context.Context, *GetListTopicsRequest) (*GetListTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListTopics not implemented")
}
func (UnimplementedQuizzesServiceServer) GetListQuizzes(context.Context, *GetListQuizzesRequest) (*GetListQuizzesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListQuizzes not implemented")
}
func (UnimplementedQuizzesServiceServer) StartQuiz(context.Context, *StartQuizRequest) (*StartQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartQuiz not implemented")
}
func (UnimplementedQuizzesServiceServer) SubmitQuiz(context.Context, *SubmitQuizRequest) (*SubmitQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitQuiz not implemented")
}

// UnsafeQuizzesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizzesServiceServer will
// result in compilation errors.
type UnsafeQuizzesServiceServer interface {
	mustEmbedUnimplementedQuizzesServiceServer()
}

func RegisterQuizzesServiceServer(s grpc.ServiceRegistrar, srv QuizzesServiceServer) {
	s.RegisterService(&QuizzesService_ServiceDesc, srv)
}

func _QuizzesService_GetListTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizzesServiceServer).GetListTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.todoapp.proto.task.QuizzesService/GetListTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizzesServiceServer).GetListTopics(ctx, req.(*GetListTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizzesService_GetListQuizzes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListQuizzesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizzesServiceServer).GetListQuizzes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.todoapp.proto.task.QuizzesService/GetListQuizzes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizzesServiceServer).GetListQuizzes(ctx, req.(*GetListQuizzesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizzesService_StartQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizzesServiceServer).StartQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.todoapp.proto.task.QuizzesService/StartQuiz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizzesServiceServer).StartQuiz(ctx, req.(*StartQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizzesService_SubmitQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizzesServiceServer).SubmitQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.todoapp.proto.task.QuizzesService/SubmitQuiz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizzesServiceServer).SubmitQuiz(ctx, req.(*SubmitQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuizzesService_ServiceDesc is the grpc.ServiceDesc for QuizzesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuizzesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go.todoapp.proto.task.QuizzesService",
	HandlerType: (*QuizzesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetListTopics",
			Handler:    _QuizzesService_GetListTopics_Handler,
		},
		{
			MethodName: "GetListQuizzes",
			Handler:    _QuizzesService_GetListQuizzes_Handler,
		},
		{
			MethodName: "StartQuiz",
			Handler:    _QuizzesService_StartQuiz_Handler,
		},
		{
			MethodName: "SubmitQuiz",
			Handler:    _QuizzesService_SubmitQuiz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quizzes_service.proto",
}
