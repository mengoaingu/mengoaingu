// Code generated for package migrations by go-bindata DO NOT EDIT. (@generated)
// sources:
// 20230429051609_create_table_profile.down.sql
// 20230429051609_create_table_profile.up.sql
// gen.go
// migrations.go
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __20230429051609_create_table_profileDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _20230429051609_create_table_profileDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__20230429051609_create_table_profileDownSql,
		"20230429051609_create_table_profile.down.sql",
	)
}

func _20230429051609_create_table_profileDownSql() (*asset, error) {
	bytes, err := _20230429051609_create_table_profileDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20230429051609_create_table_profile.down.sql", size: 0, mode: os.FileMode(436), modTime: time.Unix(1682745369, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20230429051609_create_table_profileUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xc1\x6a\x83\x40\x10\x86\xef\x3e\xc5\x1c\x15\x7a\x28\x85\x42\xa1\xe4\xb0\xd1\x69\x2b\xd5\x55\x36\xeb\x21\x27\x9d\x66\xb7\xed\x82\x31\xb2\xae\xd2\xbe\x7d\x09\x31\x4d\x41\xa5\x97\xec\x71\xf9\xe6\xfb\x87\xe1\x0f\x05\x32\x89\x20\xd9\x3a\x41\xa8\xfa\x4e\xdb\xae\xf2\x7c\x0f\x00\xa0\x32\xaa\x82\x85\xf7\x66\x3e\x4c\xe3\xfc\xbb\xdb\xe0\xf2\xc7\x33\x09\xbc\x48\x12\x60\x85\xcc\xca\x98\x87\x02\x53\xe4\xf2\xe6\x24\xeb\x97\x6d\x03\xd9\xdd\x27\x59\xff\xfe\x8f\xed\x2c\x1b\xa7\x95\xe9\xda\x9a\xbe\xcb\x86\xf6\xba\x5a\x9c\x1e\x61\xbd\x27\x53\xcf\x87\x4d\x61\x1a\xc8\x91\x9d\xa5\x9d\xfe\x72\x23\xd5\xda\xc3\x60\x94\x9e\xe3\xa6\xca\x9d\xd5\xe4\xb4\x2a\xc9\x4d\x70\x19\xa7\xb8\x91\x2c\xcd\x61\xe6\x6e\x11\x3e\xb1\x22\x91\x10\x16\x42\x20\x97\xe5\x2f\x7c\x3e\x61\xab\xae\xeb\x85\x8c\x43\x91\x47\xc7\x02\x2c\x65\x2a\x5d\xeb\xff\x32\x4f\x68\x2e\xe2\x94\x89\x2d\xbc\xe2\x16\xfc\x63\x77\x02\x2f\x00\xe4\xcf\x31\x47\x58\x41\xdc\x34\x87\x68\xed\xc1\x65\x99\x17\x26\x36\x28\x61\x05\xbd\x7b\x7f\x78\xfc\x09\x00\x00\xff\xff\x27\xa8\x54\xc2\x88\x02\x00\x00")

func _20230429051609_create_table_profileUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20230429051609_create_table_profileUpSql,
		"20230429051609_create_table_profile.up.sql",
	)
}

func _20230429051609_create_table_profileUpSql() (*asset, error) {
	bytes, err := _20230429051609_create_table_profileUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20230429051609_create_table_profile.up.sql", size: 648, mode: os.FileMode(436), modTime: time.Unix(1683909684, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _genGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x4f\xcf\xb7\x4a\x4f\xcd\x4b\x2d\x4a\x2c\x49\x55\x48\xcf\xd7\x4d\xca\xcc\x4b\x49\x2c\x49\x54\xd0\x2d\xc8\x4e\x57\xc8\xcd\x4c\x2f\x4a\x2c\xc9\xcc\xcf\x2b\x56\xd0\xcd\x47\xe2\xe9\xa5\xe7\x2b\xe8\x71\x71\x15\x24\x26\x67\x27\xa6\xa7\x22\x49\x70\x01\x02\x00\x00\xff\xff\x22\x74\xf5\x14\x50\x00\x00\x00")

func genGoBytes() ([]byte, error) {
	return bindataRead(
		_genGo,
		"gen.go",
	)
}

func genGo() (*asset, error) {
	bytes, err := genGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen.go", size: 80, mode: os.FileMode(511), modTime: time.Unix(1683908168, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x5d\xaf\xd3\x48\x12\x7d\xb6\x7f\x45\x4f\xa4\x41\xf6\x2a\x9b\xf8\xfb\x23\xd2\x95\x56\x03\xec\x8a\x87\x65\xa4\x85\x79\xda\x5a\x5d\xb5\xed\xee\x60\x6d\x62\x07\xdb\x19\x2a\xa0\xfb\xdf\x57\xa7\xdb\xc9\xe4\xc2\xc0\x10\xc4\xce\xc3\x0d\x76\xbb\xea\xd4\xa9\x53\x1f\x2d\xd6\x6b\xf1\xb4\x6f\x94\xd8\xaa\x4e\x0d\x72\x52\x8d\xd0\xfd\x20\x0e\xb2\xfe\xaf\xdc\x2a\xb1\x6f\xb7\x83\x9c\xda\xbe\x1b\x45\x75\x12\xdb\xfe\xaf\x55\xdb\x35\x72\x92\xe2\xd9\xcf\xe2\xe5\xcf\xaf\xc5\xf3\x67\x2f\x5e\xaf\x84\xf7\xb7\x8b\xb7\xef\xae\xd7\x62\xec\x8f\x43\xad\xc6\x0d\x9e\xa3\x20\x8a\x83\x24\x2a\x83\x34\xcc\x82\xf2\xbe\x1e\x94\x9c\xd4\xfd\x24\xab\x9d\xba\x3f\x0c\xbd\x6e\x77\x6a\xd5\xf4\xef\xba\xd5\xf8\x76\xf7\xb5\xf6\xc7\xc3\xd9\x7a\xab\xba\xd5\xb6\xc7\xd3\x6f\x4c\x71\xf0\x29\x7f\xd7\x6d\xf7\x87\x7e\x98\x84\xe7\x3a\x8b\xea\x34\xa9\x71\xe1\x3a\x8b\xba\xdf\x1f\x06\x35\x8e\xeb\xed\xfb\xf6\x80\x03\xbd\x9f\xf0\x4f\xdb\xdb\xdf\x75\xdb\x1f\xa7\x76\x87\x97\xde\x38\x1c\xe4\xf4\x66\x0d\x12\x78\xc0\xc1\x38\x0d\x6d\xb7\x35\xdf\xa6\x76\xaf\x16\xae\xef\xba\xfa\xd8\xd5\x62\x56\xea\x5f\x4a\x36\x9e\x91\xec\xdf\xff\x41\xd8\xa5\xe8\xe4\x5e\x09\xeb\xe6\x0b\xef\x7c\xaa\x86\xa1\x1f\x7c\xf1\xc1\x75\xb6\xef\xcd\x9b\xd8\xdc\x09\xb0\x5a\xbd\x54\xef\x00\xa2\x06\xcf\xd0\xc6\xfb\x4f\x47\xad\xd5\x60\x60\x7d\xdf\x75\x5a\x6d\x1c\x7e\xb8\x13\x5d\xbb\x03\x84\x33\xa8\xe9\x38\x74\x78\x5d\x0a\xbd\x9f\x56\xcf\x81\xae\xbd\x05\x80\xc4\x8f\x6f\x37\xe2\xc7\x5f\x17\x96\x89\x89\xe5\xbb\xce\x83\xeb\x3a\xbf\xca\x41\x54\x47\x2d\x6c\x1c\x1b\xc4\x75\xee\x2d\x9d\x3b\xd1\xf6\xab\xa7\xfd\xe1\xe4\x3d\xa9\x8e\x7a\x29\xb6\xef\x7d\xd7\xa9\x77\xcf\xcf\x4c\x57\x4f\x77\xfd\xa8\x3c\xdf\xfd\x5e\x7c\x00\x63\xf1\x3f\x03\xa4\x86\xc1\xf2\x9e\x0f\xab\xa3\x5e\xfd\x04\xea\x9e\xbf\x84\x85\xfb\xe0\xba\xd3\xe9\xa0\x84\x1c\x47\x35\x41\xf2\x63\x3d\x01\xc5\xe4\x37\xd7\xc3\x75\xda\x4e\xf7\x42\xf4\xe3\xea\xef\xed\x4e\xbd\xe8\x74\x7f\xf1\x9b\x4b\x78\x3e\xbf\x42\x30\x35\x14\x62\x2e\xa3\xeb\x8c\xed\x7b\xf3\xde\x76\x53\x96\xb8\xce\x1e\x13\x25\x2e\xa0\xff\xec\x1b\x65\x0e\x5f\xb7\x7b\x25\xd0\x26\x2b\x3c\x21\xce\x7a\x2d\x5e\x02\x6b\x4e\x01\x9d\x65\x64\xb0\x3d\xe4\xe9\xf6\x63\x12\xbe\xb1\xf7\xfc\x39\x34\xc8\x5c\x7c\x57\xc6\xd3\xa2\xbe\x02\xa3\x6b\x54\x50\xfc\x02\x2a\xec\x3d\xdf\x26\xf0\x18\xd4\x38\x5a\x50\x24\xf2\x08\x14\x89\x7e\x01\x14\xf6\x9e\x7f\x2d\xc3\x63\x68\xe3\xfe\x79\xe8\x56\x9f\x8c\x5a\x5f\x8e\x00\x29\x3d\xff\x37\x59\x3f\x09\x71\xa5\xf5\x8b\xf1\x59\x3b\x3c\x0a\xf3\xee\x8d\x9a\xde\xa8\x41\x48\xd1\xb4\x83\xaa\xa7\x7e\x38\x7d\x21\x9c\xf1\xf7\x7c\x51\xf5\xfd\xee\xd3\x54\x9e\xf4\xe3\x0a\x79\x20\xc6\x0f\x77\x22\x38\x97\xe2\x34\x3e\x0a\xd9\x8e\x62\x3c\x8d\x7f\xa4\xdd\xab\xd3\x68\xeb\xa1\x06\x2d\x6b\xf5\xe1\xe1\x2a\xde\xdc\xdc\x98\xd7\xfb\xfb\xaf\xd8\x98\xcf\xfa\x77\xdd\xab\xb7\x3b\x71\x37\x37\xbd\xb7\x20\x0e\x35\x71\x51\x11\x07\x05\x71\x10\xfc\xfe\x9f\xd6\xc4\x41\xf8\xf8\xdd\x9c\x7d\xc6\xde\xfe\x2d\xce\x2b\xf0\x06\x6a\xf3\xdc\xfe\xde\x3e\x3c\x4f\xf7\xd5\x3e\x75\x1d\xe7\x96\xbc\x97\xae\xe3\x2c\x6e\xb9\x88\x16\x4b\xd7\xf1\xa1\xf0\xad\x69\x20\x83\xbf\x98\x75\x73\x9d\x81\xd9\x37\x97\xa5\x7e\xbb\x2a\x7f\xb4\x51\x2f\x8b\xd0\xac\xb2\xcd\xdd\xc7\xcd\xf4\x01\x7b\x61\x23\x6e\x94\xc0\x6c\x8c\x8d\x08\x96\xa6\x53\x37\xd7\x53\xec\x25\x71\xe6\x9b\x73\xcc\xd6\xc6\xce\xde\x2f\x5d\xcb\x5e\x98\x15\x51\x9e\xa4\x71\x56\x2e\x45\xe0\x3f\xb8\x8e\x04\x9f\x27\x46\x92\x0f\x46\x87\x8d\x98\xe5\x00\xd9\x8d\xf9\x7d\xb8\x14\x59\x2e\x6f\xee\xed\x5f\x0e\xdf\xda\xd9\xb2\x26\x2e\x23\xe2\x3a\x24\xce\x24\x71\x11\x13\x27\x01\x71\x18\x10\x17\x19\xb1\xd2\xc4\xb1\x22\xae\x53\xe2\xb0\x26\x0e\x53\xe2\x5c\x12\x47\x05\x71\x91\x12\x27\x11\xb1\x0c\x89\x55\x42\x5c\x05\xc4\x0d\x70\x4a\xe2\xa8\x22\x6e\x52\xe2\x34\x25\x8e\x81\x53\x11\x47\x21\x71\x94\x13\x97\x0d\x71\x96\x11\x57\x39\xb1\x6a\x88\x8b\x88\x38\x0e\x89\x2b\x60\x29\xe2\x26\x22\xae\x14\x71\xde\x10\x07\xa5\xfd\x96\x34\xc4\x49\x48\x2c\x53\xe2\x12\x7e\x35\x71\x1e\x12\xeb\x92\x58\x65\xc4\xba\x22\x2e\x70\x8e\x49\xc5\x74\x22\x6e\x44\x5c\x80\x0b\x78\x01\x47\xce\x18\x05\xb1\xc6\x33\x62\x55\x36\xa6\x8e\x88\xf3\x7a\xf6\x0d\x88\x65\x60\xfd\xa5\xb4\xfc\x90\xab\xce\x2d\x6f\xe8\x91\xd4\xc4\x2a\x26\xd6\x35\x71\x55\x59\x1c\x15\x58\x9c\x3a\x27\x8e\x63\xcb\xbd\xaa\x89\x93\x82\x38\x8c\x88\xb3\xc0\xe2\xd4\x35\x71\x2d\x89\xcb\xc2\x72\x0e\x22\xe2\x34\xb6\x1a\xc2\x1f\xf9\x44\x89\xd5\x0c\xb9\x66\xd0\x21\xb6\x39\x34\x8d\xd5\x30\x2d\xe7\x4d\xa4\x88\x0b\x6d\x75\x8c\x50\x1f\xe4\x03\x8d\x53\x62\x05\x7b\xc4\x91\x56\xcf\xba\xb2\x35\xd5\xd0\x5e\x12\xa7\xf8\x06\x1f\x45\x9c\x41\xff\x33\x76\x4c\x5c\x6b\xcb\x0d\xba\xe3\x5b\x28\x89\xeb\x82\xb8\x0c\x6d\xfd\x4c\x1d\x1a\x1b\x3f\x8f\x88\xa3\xd8\xd6\x1b\xf1\xea\xd8\xe6\x5a\x26\xc4\xa5\xb2\x3a\xc9\x6c\xce\xb9\xb1\x76\xa6\x5f\x12\xe2\x08\xf6\xa5\x8d\x93\xa3\xef\x4a\xcb\xbf\x9a\x63\x21\xa7\x7a\xe6\x00\x5d\x32\x45\x1c\x86\xb6\x06\x15\xbe\x47\xd6\x0e\xfd\x1a\x66\xb6\x1f\x51\x6f\xd3\x23\x29\x71\xa4\x6d\x5d\xe3\x39\x47\x39\xd7\x1b\xda\xa2\x16\x05\xea\x13\x5b\x8c\x24\xb7\xb5\x43\x3d\x10\x37\x4b\x2d\xbf\xb4\xb1\xf6\xd0\x1b\x3d\x91\x68\xe2\xac\x20\x8e\x80\x13\xd9\x3c\x4d\x9f\x35\xb6\xde\x38\x03\x17\xf4\x46\x16\x13\xe7\x67\xcc\xb9\xb7\x90\x3b\xf4\x8d\xe7\x98\x69\x61\xfb\xb2\x01\xcf\xc4\xea\x0e\x7c\xd4\xd4\xcc\x25\xb4\x2e\x89\xc3\x9c\x38\xca\xec\x3c\x61\xfe\x90\x0f\xfa\x1c\x75\xcb\x2b\xe2\x1c\xb9\x16\x36\x2e\x7a\xef\xe3\x1b\x0b\xb5\x45\xef\xa7\x88\x8f\x9e\x2e\x2c\xaf\x6f\xb8\xb1\xcc\xc2\xf9\xff\xdc\x57\x06\xfa\xab\x6f\x2b\xfb\xdf\xa0\xdb\xef\x2a\x13\xe5\x7b\xdd\x54\xd7\x6a\xfc\x99\xf7\xd4\x39\xf9\xf9\x96\xca\x92\xe2\xd6\x7b\x2a\x2e\x83\x32\x2b\x92\xef\x71\x4f\x6d\x55\xf7\x8f\xfe\x9b\xee\x20\xec\xfb\x26\xb7\x73\x85\xb9\xc0\xbd\x90\xc8\xf9\x1d\x7b\xbf\xb2\xb3\x85\x33\xcc\x65\x52\xda\x7b\x05\x7b\x15\xf6\xcd\xbc\xa7\xb0\x5f\xb0\x5b\x61\x0f\x9b\x8b\x6d\x42\xdc\x04\x16\x03\x3b\x0c\x7b\x3f\xcd\xed\xb3\xc1\xff\x5f\x00\x00\x00\xff\xff\xeb\xdb\x12\x3f\x00\x10\x00\x00")

func migrationsGoBytes() ([]byte, error) {
	return bindataRead(
		_migrationsGo,
		"migrations.go",
	)
}

func migrationsGo() (*asset, error) {
	bytes, err := migrationsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations.go", size: 8192, mode: os.FileMode(511), modTime: time.Unix(1683909687, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"20230429051609_create_table_profile.down.sql": _20230429051609_create_table_profileDownSql,
	"20230429051609_create_table_profile.up.sql":   _20230429051609_create_table_profileUpSql,
	"gen.go":                                       genGo,
	"migrations.go":                                migrationsGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"20230429051609_create_table_profile.down.sql": &bintree{_20230429051609_create_table_profileDownSql, map[string]*bintree{}},
	"20230429051609_create_table_profile.up.sql":   &bintree{_20230429051609_create_table_profileUpSql, map[string]*bintree{}},
	"gen.go":                                       &bintree{genGo, map[string]*bintree{}},
	"migrations.go":                                &bintree{migrationsGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
