// Code generated by "enumer -type=Priority -trimprefix=Priority -json -yaml -text -sql"; DO NOT EDIT.

package domain

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _PriorityName = "InvalidLowMediumHigh"

var _PriorityIndex = [...]uint8{0, 7, 10, 16, 20}

const _PriorityLowerName = "invalidlowmediumhigh"

func (i Priority) String() string {
	if i < 0 || i >= Priority(len(_PriorityIndex)-1) {
		return fmt.Sprintf("Priority(%d)", i)
	}
	return _PriorityName[_PriorityIndex[i]:_PriorityIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PriorityNoOp() {
	var x [1]struct{}
	_ = x[PriorityInvalid-(0)]
	_ = x[PriorityLow-(1)]
	_ = x[PriorityMedium-(2)]
	_ = x[PriorityHigh-(3)]
}

var _PriorityValues = []Priority{PriorityInvalid, PriorityLow, PriorityMedium, PriorityHigh}

var _PriorityNameToValueMap = map[string]Priority{
	_PriorityName[0:7]:        PriorityInvalid,
	_PriorityLowerName[0:7]:   PriorityInvalid,
	_PriorityName[7:10]:       PriorityLow,
	_PriorityLowerName[7:10]:  PriorityLow,
	_PriorityName[10:16]:      PriorityMedium,
	_PriorityLowerName[10:16]: PriorityMedium,
	_PriorityName[16:20]:      PriorityHigh,
	_PriorityLowerName[16:20]: PriorityHigh,
}

var _PriorityNames = []string{
	_PriorityName[0:7],
	_PriorityName[7:10],
	_PriorityName[10:16],
	_PriorityName[16:20],
}

// PriorityString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PriorityString(s string) (Priority, error) {
	if val, ok := _PriorityNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PriorityNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Priority values", s)
}

// PriorityValues returns all values of the enum
func PriorityValues() []Priority {
	return _PriorityValues
}

// PriorityStrings returns a slice of all String values of the enum
func PriorityStrings() []string {
	strs := make([]string, len(_PriorityNames))
	copy(strs, _PriorityNames)
	return strs
}

// IsAPriority returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Priority) IsAPriority() bool {
	for _, v := range _PriorityValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Priority
func (i Priority) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Priority
func (i *Priority) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Priority should be a string, got %s", data)
	}

	var err error
	*i, err = PriorityString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Priority
func (i Priority) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Priority
func (i *Priority) UnmarshalText(text []byte) error {
	var err error
	*i, err = PriorityString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for Priority
func (i Priority) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Priority
func (i *Priority) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = PriorityString(s)
	return err
}

func (i Priority) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Priority) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Priority: %[1]T(%[1]v)", value)
	}

	val, err := PriorityString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
