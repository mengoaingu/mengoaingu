// Code generated by "enumer -type=TaskStatus -trimprefix=TaskStatus -json -yaml -text -sql"; DO NOT EDIT.

package domain

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _TaskStatusName = "InvalidInProgressCompletedCancelled"

var _TaskStatusIndex = [...]uint8{0, 7, 17, 26, 35}

const _TaskStatusLowerName = "invalidinprogresscompletedcancelled"

func (i TaskStatus) String() string {
	if i < 0 || i >= TaskStatus(len(_TaskStatusIndex)-1) {
		return fmt.Sprintf("TaskStatus(%d)", i)
	}
	return _TaskStatusName[_TaskStatusIndex[i]:_TaskStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TaskStatusNoOp() {
	var x [1]struct{}
	_ = x[TaskStatusInvalid-(0)]
	_ = x[TaskStatusInProgress-(1)]
	_ = x[TaskStatusCompleted-(2)]
	_ = x[TaskStatusCancelled-(3)]
}

var _TaskStatusValues = []TaskStatus{TaskStatusInvalid, TaskStatusInProgress, TaskStatusCompleted, TaskStatusCancelled}

var _TaskStatusNameToValueMap = map[string]TaskStatus{
	_TaskStatusName[0:7]:        TaskStatusInvalid,
	_TaskStatusLowerName[0:7]:   TaskStatusInvalid,
	_TaskStatusName[7:17]:       TaskStatusInProgress,
	_TaskStatusLowerName[7:17]:  TaskStatusInProgress,
	_TaskStatusName[17:26]:      TaskStatusCompleted,
	_TaskStatusLowerName[17:26]: TaskStatusCompleted,
	_TaskStatusName[26:35]:      TaskStatusCancelled,
	_TaskStatusLowerName[26:35]: TaskStatusCancelled,
}

var _TaskStatusNames = []string{
	_TaskStatusName[0:7],
	_TaskStatusName[7:17],
	_TaskStatusName[17:26],
	_TaskStatusName[26:35],
}

// TaskStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TaskStatusString(s string) (TaskStatus, error) {
	if val, ok := _TaskStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TaskStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TaskStatus values", s)
}

// TaskStatusValues returns all values of the enum
func TaskStatusValues() []TaskStatus {
	return _TaskStatusValues
}

// TaskStatusStrings returns a slice of all String values of the enum
func TaskStatusStrings() []string {
	strs := make([]string, len(_TaskStatusNames))
	copy(strs, _TaskStatusNames)
	return strs
}

// IsATaskStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TaskStatus) IsATaskStatus() bool {
	for _, v := range _TaskStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TaskStatus
func (i TaskStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TaskStatus
func (i *TaskStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TaskStatus should be a string, got %s", data)
	}

	var err error
	*i, err = TaskStatusString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for TaskStatus
func (i TaskStatus) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for TaskStatus
func (i *TaskStatus) UnmarshalText(text []byte) error {
	var err error
	*i, err = TaskStatusString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for TaskStatus
func (i TaskStatus) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for TaskStatus
func (i *TaskStatus) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = TaskStatusString(s)
	return err
}

func (i TaskStatus) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *TaskStatus) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of TaskStatus: %[1]T(%[1]v)", value)
	}

	val, err := TaskStatusString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
