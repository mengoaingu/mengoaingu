// Code generated for package firebase by go-bindata DO NOT EDIT. (@generated)
// sources:
// mengoaingu_firebase.json
package firebase

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mengoaingu_firebaseJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x95\xc9\xce\xa3\xca\x19\x86\xf7\xe7\x2a\x5a\x2d\x65\x45\xba\xc1\x66\x32\x67\x15\x26\x83\x19\x8d\x0d\xc6\x58\x48\xbf\xca\x8c\xc5\x50\x60\x66\x88\x72\xef\x91\xbb\xff\x48\xa7\x4f\x12\x29\x61\xc1\x02\xde\xe7\xad\xaf\xbe\xcd\xf3\xf7\xdf\xbe\x7c\xf9\x3a\xac\x6d\xf2\xf5\xf7\x2f\x5f\xfb\xa4\x9b\x60\x94\x7c\x80\x28\x6a\x46\x34\x7c\xfd\xeb\xfb\x67\xdb\x35\x45\x12\x0d\x1f\x30\x7e\x47\xea\x04\x65\x0d\x80\x28\x1b\xbf\x4d\xe8\x5f\x01\x38\x81\x21\xf9\x28\x93\xf5\x33\x44\x3e\x0f\xf4\x9e\xa4\x89\x88\xd9\x71\x4c\x12\x73\x29\xc9\x70\x3b\x8a\x7c\x12\xcf\xf4\x19\x25\x74\x42\x24\x09\x0b\x88\x27\xf8\x37\xfe\x0d\x7f\x7b\x3f\x82\xac\x9c\xac\x2f\xe7\xcb\xe9\xc6\xbb\xf2\x17\x5d\x0e\x7e\x7c\x0d\x91\x79\x3a\xc9\x53\x76\x12\x78\x89\xb7\x84\xac\x7c\xe5\x25\x54\xb8\x99\x10\x78\x47\x3e\xf2\xfc\x55\x14\xf4\x6c\xce\xb2\x6b\xc9\x67\x32\xcf\x37\x27\x81\x77\x24\xaf\x65\x3a\x81\x29\x98\x7a\x4a\x5f\x7e\x88\xf6\xc6\xeb\x28\x36\x31\x58\xea\x18\x48\x2a\xe5\xd8\x7c\x8a\xa4\x52\x77\xab\xe4\x78\xc8\x54\x2e\x65\xf9\x1a\x53\x99\x87\x54\xb4\x67\x3c\x38\x91\x1e\x35\x1f\x7b\xca\x65\x87\xb3\x66\x63\x87\x2d\x57\x42\x24\xcc\x2b\x71\xe7\xd4\xa8\x14\xc7\x71\x58\x6a\xb4\xee\xb0\x96\x9b\x9b\xeb\xee\xd9\x96\x85\xca\x71\x31\x12\x88\x4a\xa1\x98\xdd\x9d\xc7\x39\x93\xbf\x0f\x4b\x2e\x57\x6e\x90\x70\x4c\xc3\xc3\x2a\x23\x42\x34\x8d\x96\x1d\xd4\xec\xc8\x1f\xfd\xbb\x50\x1e\x7d\x9c\x05\x3a\x4a\x70\x06\x37\xe1\x8c\xdc\xb4\x53\x8e\x35\xdc\x8c\x19\xf7\xd3\x35\xda\xce\x5c\x91\xe2\x2f\xe1\x68\x64\x4e\xb1\xdf\x2d\x82\xf2\x98\x43\x04\xa3\xf5\x52\x78\x53\x81\x5e\x77\xa7\x81\x8f\x55\x37\xaf\x87\xf3\x68\x36\x9b\x25\x6a\xc1\xcd\x09\x80\x31\xcc\x39\x9b\xe5\x33\xc6\x3a\x4a\x7d\x03\x95\xf4\x58\x36\x0a\x3f\x73\xf2\xf4\xaa\xa6\xeb\x33\x44\x92\x76\x18\x06\xbd\x93\x5c\x7f\x99\x98\xbc\xc6\x75\x83\xed\x4e\x53\x86\xbf\x30\xcb\x59\x3c\xd5\xb4\xf1\xd6\x8c\x04\xc7\xd0\x86\xf5\x38\xae\xeb\x32\x6d\x17\x65\xbc\xb8\x18\x66\x5c\x7a\xd5\xbb\xf5\x21\x2a\xfc\xd1\x69\x53\x58\xf0\x99\x29\xf0\xbc\x2c\x66\x99\xcc\x2b\xc0\xd5\x01\x43\xae\x03\xec\xcc\x5e\x6c\xa2\x04\xbf\x96\x32\x16\xe1\xe2\xed\x9e\x78\x71\x9e\x52\x74\x60\x35\xdb\x72\x98\xa8\xbb\x14\xa2\x5b\xcd\xe6\x5e\x62\x0a\x7a\x47\x17\x9b\xea\xd2\x97\xe0\xae\x04\x1b\x02\xfe\xc1\xaa\x3c\xc0\xc8\x0b\xeb\x19\xac\x98\x0f\xf4\xd6\xa4\x49\x1d\xf5\x4a\xfc\xac\xf2\x5d\xcb\x08\xc1\x71\xcc\xd8\x44\x0b\x11\x92\xe0\xf9\xe4\xe0\x17\x6d\x29\x9f\xd8\xda\xb6\x90\xd5\x2f\x0d\x3d\xfa\x03\xe4\xb4\x24\x26\x08\xec\xc0\xdd\x14\x6e\x24\xa8\x41\xa0\xb3\x28\x3d\x79\xbb\x4b\xbf\x71\x97\x85\x9c\x2d\x38\x88\xc7\x47\x88\xe4\xf4\x81\x17\xc1\xe3\x26\x5e\x92\x73\x8b\xe1\x67\xe7\xa1\xc7\x20\x1a\xd9\x0e\x2a\x0b\xc8\x09\x8f\xa5\xab\x1b\x57\x76\x4b\xa3\x8a\xe2\x89\x34\x0d\x35\x88\xb7\xd5\xac\x31\xff\x18\x53\x76\x70\xd2\x42\xb4\xf7\x2b\xe5\x30\xe5\x6e\x03\xd9\xdd\xc3\xc7\xf9\x4c\xa5\x71\xf4\xb2\x6d\xde\x60\x6e\xec\x0b\x3b\x70\x2c\x3d\xbb\x9a\x96\xa5\x56\x9f\x0f\xf8\xa0\xdb\x7e\x7b\x44\xaf\xa6\xca\x65\x98\x76\xe0\xcc\x87\xe8\x2a\x11\xf7\xe1\xf8\x58\xc8\x73\x2d\x5c\x99\xbb\x81\x56\xd4\xdf\x6f\x87\x45\x8f\x6c\x4f\xd9\x95\xd5\xb6\x98\xe9\x6b\x54\x6f\xab\xa3\x0b\x99\x23\x2d\x0e\x56\x71\x2b\x9e\xe8\x01\xe7\xe9\x1a\x39\x61\x21\xc2\x5f\x27\x41\x29\x54\x26\x05\x3a\x4a\x65\xc0\xa6\x4f\x15\x5b\xac\xe7\x1a\xb8\x4e\x01\xae\xca\xfe\x8e\x84\x86\xf3\x69\x4c\xf6\xf2\xea\x78\xc7\x35\x2a\xc8\x2b\x75\x5d\xb4\xf1\xf0\x9c\xaa\x07\x56\x86\x68\x03\x38\xba\xb0\x5d\x3a\x09\x87\xfc\xac\x10\x05\xcc\x04\x36\x57\x21\x04\x92\x7a\x05\x5c\x0a\x77\xfa\xe5\x31\x2c\xda\x90\x4c\x32\x19\xeb\x95\x5c\xe1\x64\xdb\xcc\x77\x27\x36\x7c\x35\x7d\x41\x3b\x44\xb2\xe0\x5e\xae\xee\xbe\xb6\x2d\xbb\x24\x44\x91\x49\x66\xa2\x7f\xf1\xd0\x3a\xce\x3f\xa6\xce\x5b\x55\xb9\x5a\x80\xa1\x39\xaf\x88\xc9\xfd\xa8\x04\xf8\x13\x98\x91\x82\x13\xd2\x40\x79\x97\xa9\x0a\x51\xd1\xdd\xb4\xea\xb1\x17\xd6\xb5\xdd\xce\x93\xd8\xca\x71\x47\x33\x4e\xc9\x01\x55\xe4\x0c\x88\x0c\xd6\xa8\x6b\x81\x70\xfc\xb9\xee\x65\x4b\x3e\x82\x57\xdf\xba\xb5\xe3\x91\x56\x3c\xf1\x13\x11\x49\x21\xca\x2d\x90\x09\xd2\xc2\x72\xde\x93\x73\x48\x76\xbb\xe6\x78\x7e\xc2\x78\x62\x35\xc8\x93\x83\x88\x2e\xad\xc5\x00\xbf\xee\xad\xfe\xc8\x2b\x92\x66\x3f\xbc\xec\xa9\x9d\xdb\x3e\x9b\x22\x6b\x3c\x04\xdc\x3d\x44\x71\xbf\x42\x72\x47\x66\xb7\x1f\xbb\x16\xaf\x58\xc0\x67\x56\xe9\x5d\x63\x0f\x8c\xac\xfd\x3c\x75\x0a\x15\xb5\xd1\xea\x65\xd2\xca\x98\x6b\xe4\xae\x46\xa7\x1b\x6e\xe2\x01\xb9\xb3\x77\x74\x71\x0c\x11\x27\x35\x49\xdc\xdc\x62\x95\x38\x8d\x07\x48\xbe\xf6\xd9\x7e\x31\x34\x01\x5c\x5b\x0a\x4a\x31\x4f\x9e\xfc\x47\x77\x45\x26\x7d\xb2\x89\x23\x59\x90\xb6\xab\x61\x0a\xda\xc3\x81\xde\xec\x6b\x2f\xa7\xe7\x10\x11\xab\xf6\xdc\x9d\x59\x67\x3f\xe5\x69\x2e\x50\xed\xb4\x91\x4f\xbb\x81\xbd\xad\x6f\x43\x90\xc4\xe5\xcc\x1e\x5e\x1b\x13\x5f\x27\xca\xb6\x71\xaa\x9f\x8b\x79\xbf\xc1\x16\xe9\xd8\xcf\x99\x99\x10\x61\xe5\x6a\xbb\xa3\x4d\xe3\x83\x91\x53\x2a\xdc\xe7\x77\xe5\x82\x93\x31\x4f\xd6\xe8\xe1\xf7\xae\xaf\x3d\x5b\x0e\x47\x69\x55\x5c\xf2\x5c\xbb\xe3\x02\x80\xb7\x78\x3a\x14\xd2\xed\xc2\xd9\x9c\x59\x90\x21\xda\x52\xcb\x64\x95\x96\x98\x40\xbe\x8f\x15\xe3\xdc\x64\x37\x99\x1c\x8f\x49\x11\xa5\x3a\x95\x06\xee\xcb\x2f\x0f\x11\x0c\xa8\x25\x86\x66\x85\x17\xd2\x1e\x53\x7a\x86\x13\x51\x61\x12\x36\xae\xa8\x62\x88\x26\x2e\x51\xa4\x99\x56\xb3\x1c\xc5\x7b\x9f\x7f\x2c\x51\x73\x5e\x89\x99\x15\x6a\x57\x32\x49\x5d\xad\xcc\x43\x26\x09\x14\x9b\xbe\xa7\x3e\x8e\x31\x73\x3e\x6b\xb7\xae\xdc\x8b\x5b\x6a\x34\xcc\x8b\x0c\x91\x27\xa3\x07\x55\x03\x13\xfa\x00\x96\x81\x25\x54\xcb\x2e\xd7\xf0\x5d\xab\x2b\x7e\xf1\x70\x1a\x97\x8f\xee\x59\xd0\x8d\xd8\xbd\x90\x7d\xd5\x45\x86\x41\xaf\x81\x8c\xc6\x5d\x5e\xb3\xb8\xe8\x68\x20\x44\x2e\xe6\xc3\x47\xb6\x91\x94\x26\x72\x72\xc6\x58\x5a\x66\x2a\x4e\xc4\x07\xd3\xb1\xa7\x71\xf8\xdc\x98\x4b\xc2\x91\xd4\x5e\x24\x23\x58\x5e\x62\x2f\xd3\xd4\x9c\x6c\xa2\x89\x96\xed\xe5\xda\xf8\x84\x1f\x22\xd7\x25\xac\x64\xa7\xe6\xa0\x0b\xc6\x28\x6a\x02\x27\xce\x4f\xf3\x0e\x55\x21\xfa\xa1\x24\xd9\x92\xfe\x83\xa6\x7e\x8a\x2d\xaa\x60\x82\x86\x8f\xa4\x06\xb0\x7a\x9b\x2d\x85\x5d\xf2\x04\x7d\xf2\x0d\xc4\x35\x44\x7d\x5c\x7e\xab\xa7\x98\x64\xff\xf6\x8b\x53\xbf\x43\x50\x7f\xcf\x3e\x4d\xfc\x29\xe2\xef\x51\x53\xff\x52\xf9\x53\xb3\xbb\x1d\xc9\x1c\x0e\x34\x4d\xd0\x14\x41\x11\x24\xb7\x63\xc8\x3d\xf5\x33\x07\xc6\x21\xff\x18\x3b\xf8\x8e\xe5\xc3\xd0\xf6\xbf\xe3\xf8\x67\x59\xff\x3d\x6b\x9a\xac\x4a\xde\xa5\x78\x83\x37\xef\xe8\x1e\x7f\xbf\x7f\xa2\x43\x53\x26\xe8\xcf\xec\xcf\xd4\x27\x09\x5a\xd8\xff\xa0\x7f\x44\xff\x70\x60\xdb\x35\x13\x8c\x93\xee\x63\xa1\x09\xee\x23\x4a\xba\xe1\x63\xec\xaa\x3f\xf6\xcc\xf3\xfc\xe7\x92\xcf\x01\xa6\x1d\xfe\x06\xfa\x5f\xee\xf9\xff\xf4\x74\xcd\xb3\x19\xde\x35\x75\x32\x80\x18\x0c\x00\x7f\xd3\xf8\x7f\x59\xfa\x5f\x28\xe2\x7f\x5b\xfb\x6f\xff\xf8\x67\x00\x00\x00\xff\xff\xdb\x9e\x42\x83\x23\x09\x00\x00")

func mengoaingu_firebaseJsonBytes() ([]byte, error) {
	return bindataRead(
		_mengoaingu_firebaseJson,
		"mengoaingu_firebase.json",
	)
}

func mengoaingu_firebaseJson() (*asset, error) {
	bytes, err := mengoaingu_firebaseJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mengoaingu_firebase.json", size: 2339, mode: os.FileMode(436), modTime: time.Unix(1683690151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mengoaingu_firebase.json": mengoaingu_firebaseJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"mengoaingu_firebase.json": &bintree{mengoaingu_firebaseJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
