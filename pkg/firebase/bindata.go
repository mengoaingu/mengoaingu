// Code generated for package firebase by go-bindata DO NOT EDIT. (@generated)
// sources:
// simple-app-4f689-firebase-adminsdk-4esrk-11f23bc586.json
package firebase

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _simpleApp4f689FirebaseAdminsdk4esrk11f23bc586Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x95\x47\xcf\xa3\xea\x19\x86\xf7\xe7\x57\x8c\x46\xca\xca\x99\xa1\x98\x7a\x56\xa1\x19\x03\x06\xd3\xc1\x16\xd2\x27\x3a\x18\x78\xe9\x35\xca\x7f\x8f\xbe\x12\xe9\x9c\x49\x22\x25\x2c\x58\xc0\x7d\xdd\x3c\x3c\x7a\xa5\xeb\xef\xbf\x7d\xfb\xf6\x7d\xda\xbb\xf4\xfb\xef\xdf\xbe\x8f\xe9\xb0\x94\x71\xfa\x16\xc6\x71\x3b\x83\xe9\xfb\x5f\xdf\x5f\x76\x43\xfb\x4a\xe3\xe9\xad\x4c\x3e\x22\x65\xd3\xd5\xe9\x8f\xb0\xeb\x7e\x60\x19\x41\xd1\xff\xca\x94\x4b\x38\xa5\x6f\x55\xba\x7f\xe5\x10\x24\x43\xcf\x51\x8c\x53\x04\x12\x22\x30\x1a\x63\x34\x01\x53\x58\x86\x62\x78\x84\xc4\x30\x0a\x67\x38\x81\xe2\x78\x04\xff\x1b\xff\x0e\xff\x78\xbf\x58\x41\x94\xb4\x6f\xba\x29\xb9\x8c\x2d\x7c\x53\x84\xc7\xc7\xd3\x00\xa8\x92\x24\x2c\xb9\xc4\x32\x3c\xa3\xb1\x79\xd5\x17\x55\x29\xd2\x2b\xcc\x32\x86\x70\x61\x18\x8b\x63\x95\x7c\xcd\x73\xab\x62\x72\x81\x61\x5a\x89\x65\x0c\xde\x7e\xe5\xdb\x35\x12\x29\x4e\xc9\xdc\x2a\x00\xf4\xa4\xb4\xbc\x64\x67\x25\xdd\xb8\xaf\x97\x5c\x8e\xc6\x49\x46\xc2\x4d\x9f\x64\xa6\x40\x78\x44\x75\x5b\x2a\x1c\x78\x0a\x3a\xce\x97\x01\xdf\x27\x95\x54\xea\xb6\x5a\x95\x7a\x27\xef\xae\xa6\x33\x47\x00\xf8\xf4\x9e\x66\x2c\x6a\x73\x82\xb2\xb6\xe7\x3a\xb1\xb8\x85\x96\x35\x61\x01\xa5\x70\x45\x30\xb3\xac\xf8\x8d\x67\x37\xa5\x4e\x9b\x88\xab\x26\x79\xb2\x54\x5e\xb4\x78\x8b\x86\xb5\x7b\x6b\x03\x16\x0e\x80\xaf\x5b\x03\x71\xe1\x29\xe5\x54\x11\xd2\xac\x39\x6e\x53\x8f\x8e\xf7\xf0\x69\xc0\x77\x35\xdc\x60\xba\xc6\xbe\x0e\x7b\x6f\xca\x8d\xaf\x6e\x63\x48\xdb\xa8\x34\x8b\x44\x1f\xde\xd8\x1a\x13\x7a\xf8\x19\x00\xd6\xd7\x93\xbb\x47\xab\x07\x37\x8a\x3d\x37\x92\xca\xa9\x78\x6a\xbd\x84\x18\xe0\x8e\x64\x0d\x2a\x4b\x5e\xdc\x15\xa4\x74\x41\xb7\x7e\x67\x60\x3c\xc6\x9d\xc2\xb3\xb9\x8b\x32\xf2\xfc\xd5\x86\xbb\x35\x00\x2d\x07\x61\x06\x46\x3f\xdd\x27\xc4\x08\x2e\x83\x98\x09\x01\xc7\x7c\x63\x82\x68\xde\xc5\x46\xac\xba\x76\x36\x7b\x12\xe5\xd3\x5b\x4b\x47\xd8\x70\x7d\x62\xf9\xa9\xb7\xa6\x50\xa5\x3a\xbf\xce\x16\x3d\x00\xd8\xf9\x19\x65\xe9\xcd\x66\x72\x95\x65\x18\x81\xcb\x73\x81\xe1\x06\x72\x75\xaa\x73\xe6\x03\x5a\x38\xd9\xf4\xa4\x92\x1d\xb6\x21\x3b\xfc\xb2\x50\xd4\x50\xad\x9e\x9a\x35\xa7\xd2\xd2\xc8\x53\x64\x21\x00\x0b\x01\x9d\x56\xae\xbd\x14\x78\x72\x9f\x74\xfe\x8a\xa5\x47\x2f\x9e\xd9\xc2\xdf\x88\x73\x51\x26\xf4\x22\x48\x60\xb2\x33\xb8\x3e\x38\xbb\xf6\x31\xeb\x25\x0f\xfa\x60\x1b\x8a\x5a\xaa\x0e\x37\xe1\x72\x00\x2a\x09\x4b\xd9\x23\xaf\x0d\x4d\x13\x09\x69\x63\x60\x5e\x7f\x7a\x71\x08\x61\xea\x7c\xdf\x39\x1a\x7e\x3c\xef\xa9\x03\x9d\x7a\x76\x7f\x72\x91\xca\x5f\xda\xf8\xae\xe3\x3b\xaa\xd9\x36\x94\xb1\xde\xb3\x0f\x40\x4d\x16\x29\xb6\x94\x8b\x44\x6a\x79\xbe\x53\xba\x4e\x18\xbc\xa7\xf8\x95\x55\x2b\x37\x2a\xf7\xf8\xe9\x6c\xac\x4a\x01\x61\x5d\x76\x6b\x7a\x56\xd1\xfc\xe9\xf1\x18\xa4\x2c\x35\x6b\x47\xaa\x2d\xc0\x05\x20\x5b\x41\xbc\x8e\x98\xae\x61\xa7\xf0\xe9\xbf\xfc\x17\x9c\xe9\xfc\xeb\xfc\x94\x2b\xd3\x4e\xc0\xf2\x6c\xf6\x7b\xb9\x08\x14\xdd\x52\xd8\x91\x2a\x45\x24\x60\x6a\x2b\xae\xbe\x73\x77\x6b\x75\x84\xd3\x21\x00\x16\xd3\x3c\xb9\x4b\x26\xc3\x1b\xae\x3c\xe5\x4d\x7e\x45\x0a\x0b\x63\x78\x1f\xcb\x10\x6c\x91\xf0\xc3\x58\xe5\xd5\x36\x29\xba\x35\x14\x36\x37\xf8\x8d\x5f\xe3\x10\x41\xa3\x92\x1e\x1f\x2e\xd4\xf4\x43\x00\xfc\x65\x78\x0c\x3e\xdd\xaf\x57\x6f\x69\x3c\xf2\xc1\x78\x50\x76\x9b\x08\x6b\x77\x8a\x32\x59\xc7\x4c\xa9\x0b\x7b\x3f\x29\x84\x7f\x74\x2f\xd1\x3a\x2b\xe3\xc3\x20\xb8\x3a\xb6\x08\x53\x93\xeb\xfb\x51\x06\x40\x28\x6c\x57\xa7\x12\x09\xd1\x18\xe6\xf2\xc8\xb3\xad\x59\x0f\x4b\x6e\x8d\x88\x86\x8c\x9c\x88\x4e\x7a\x95\xa4\x9e\x78\x39\x91\x1c\xec\x7a\x7d\xc8\x4b\xbd\xba\x58\x00\x21\x68\xe1\xd5\xd9\x2a\x58\x03\x90\x9d\xc2\xc6\x46\x61\xf4\x2e\xd3\xca\x9d\x9f\xb2\xe3\x82\x41\xf0\xca\x6d\xea\xfa\x31\x75\xde\x4f\x54\x38\x10\xb3\xd3\xaf\xb7\xf2\x68\x58\x1a\x29\xfb\xcd\x89\x51\x85\x60\x66\x6f\x6b\xbc\x26\x00\x91\x49\x77\xaf\xfd\xae\x4b\x26\xb9\xa2\x1d\xe9\x1c\xe2\x04\x16\xf8\xb2\x69\xb2\xa5\x5b\x26\xa7\xd0\xdd\xe6\x8b\xa4\x6f\xe8\xd5\xeb\x2c\x3f\x0e\x10\xc9\x67\x6a\xc6\x6c\xb5\x5c\x62\x87\x25\x29\x37\x00\x3b\x03\xe6\xa4\xc7\x24\xb6\xd4\xc1\x8b\x1f\xf9\x87\xa0\x58\x59\x07\x5f\x3a\xc3\x35\x34\x25\x79\x68\xc8\x0e\xf2\xca\x25\x2e\x3e\x5d\x94\xf9\xe3\x5c\x4a\xe9\x71\x12\xe0\x1b\xee\x2f\xb3\x7b\xdc\x6e\x01\x38\x0b\x5d\x8d\x0a\xf4\x15\xfb\xdc\xf5\x0c\x2b\x77\xc5\x36\xa4\x5e\xed\x49\xef\xe2\xc8\xa1\xb7\xdc\x15\xe8\x7a\xda\x25\xea\x74\xc0\x0b\x25\x38\x1d\x53\x64\x2a\xe1\x65\x98\xa0\xad\x14\xd3\x05\x80\x36\xfa\xb2\x4d\x73\x4b\x8c\x67\xe8\x49\xd0\xb4\x30\x45\x51\xe7\xbd\x1c\x5f\x90\xd1\x58\x1c\x7b\xc9\x44\xd7\x6a\x04\x14\xdd\xf1\xe2\x24\x61\xfb\x53\xb9\x5d\x75\x5a\x0d\x45\x62\x36\x43\x63\xab\x02\x40\x6e\xec\x35\x57\x9a\x93\x73\x26\xfb\xe6\x44\xb3\x17\x6f\x3f\xfa\xaa\x89\x15\x0b\x4d\x07\x6e\xf6\xc9\x1d\x3f\x22\x24\x72\x04\x8a\xe0\xd3\x32\xcf\x9f\x6e\x39\x9b\x57\x04\xe3\x3f\x37\x7d\x09\x80\x9a\xb8\x50\x4e\xd3\xc7\x6d\xbf\xf5\x6e\xc5\xd6\xce\x72\x48\xac\x9a\x5f\xd3\xfd\xd6\xe2\xe6\x71\xa9\x0b\xe3\xd0\xe9\xe1\xd0\xb7\x85\x32\xa3\xd4\x2c\x8b\x24\xdb\x1f\x06\x6c\x41\x2e\x62\xf5\xf5\x25\x00\x19\x81\x92\x28\x3a\x87\x04\xc6\xe2\x9b\xcd\x8b\x08\x6b\x46\x05\x0a\xc9\x4f\x4d\x3f\x27\x89\x00\xd0\x62\x46\xb2\x04\x12\x10\x3b\xca\xb3\xa1\xdd\x32\xcf\x31\xdd\x32\xf4\x6a\x95\x85\xe5\x9b\xfa\x0c\x40\xce\x3c\x25\x57\xb3\xd4\xaa\x83\xfa\x3d\xc7\x5a\xac\x94\xad\x7b\x9c\xdd\x73\x81\xae\x71\x09\x15\x5d\xca\x97\xfd\x9b\xcc\x7e\x9c\x6a\x16\x13\x91\x72\xd7\x5d\x53\x40\xb8\x02\x35\xaf\x74\x9f\x04\xa0\x2f\x1b\x1d\xb5\x8a\x75\xed\x50\xe3\xd6\xa9\x93\x67\x73\x39\xf7\xba\xf7\x4c\x9d\x98\x80\x43\x96\xa1\x66\xac\x66\xa6\x45\xce\x47\x86\xf8\x1e\x91\xee\xae\x54\x5c\x59\x3a\x0e\x7e\x3c\xf6\x0c\xca\x03\x60\xbd\x1c\xe7\xf6\xf2\xe9\x07\x92\xce\x36\xb3\x14\xac\xa7\xc8\x53\xe8\xae\x32\x20\xbc\xb3\x69\x5a\x5a\xcb\xc6\xe0\x0e\x75\xaf\x74\xb1\xb9\x64\xc3\xa4\x45\x41\x2b\x18\x5f\x42\xe7\xf2\xaa\x0f\xa7\x0b\x80\x43\x26\x0a\xde\x5f\x2f\x44\xf7\x88\x11\xa6\x99\xc9\xbe\x29\x79\xfa\xa2\x06\xe0\x43\x49\x82\xc6\xff\x07\x4d\x7d\x8a\x2d\xae\xcb\x14\x4c\x6f\x69\x13\x96\xf5\xbb\xd9\xb2\x72\x48\xa3\x70\x4c\x7f\x84\x49\x53\x82\x31\xa9\x7e\x60\xe9\x38\x54\x7f\xfb\x55\xab\x3f\xcb\xb0\xf9\x99\x7f\xf9\xf8\x4b\xc7\x3f\xe3\xb6\xf9\x53\xeb\x97\x69\x61\x0a\x39\x9f\x61\x8a\x40\x71\x02\x83\x09\x0c\x25\x48\x14\xfb\xcc\x85\xf3\x54\xbc\xcd\x43\xf9\x1e\x2b\xa6\xa9\x1b\x7f\x87\xa0\xaf\xb2\xf1\x67\xde\xb6\x79\x9d\xbe\x97\x42\x2d\xd4\xbe\x47\x51\xe8\xfd\xfe\x89\x4e\x6d\x95\x82\x5f\xd9\xcf\xd4\x17\x19\x76\xe5\xf8\x41\x7f\x44\xff\xf0\xc1\x6e\x68\x97\x32\x49\x87\xb7\x0d\x87\xe9\xb7\x38\x1d\xa6\xb7\x79\xa8\xff\xd8\xb3\xae\xeb\xaf\x25\x5f\x03\x2c\x08\xf4\x0e\x8c\x7f\xfa\xcf\xff\xa7\x67\x68\xa3\x76\x7a\xaf\x69\xd2\x29\x4c\xc2\x29\x84\xde\x69\xe8\xbf\xec\xfd\x2f\x18\xfc\x3f\x6f\xfe\xb7\x7f\xfc\xf6\xcf\x00\x00\x00\xff\xff\x6e\xc3\x10\xe4\x2d\x09\x00\x00")

func simpleApp4f689FirebaseAdminsdk4esrk11f23bc586JsonBytes() ([]byte, error) {
	return bindataRead(
		_simpleApp4f689FirebaseAdminsdk4esrk11f23bc586Json,
		"simple-app-4f689-firebase-adminsdk-4esrk-11f23bc586.json",
	)
}

func simpleApp4f689FirebaseAdminsdk4esrk11f23bc586Json() (*asset, error) {
	bytes, err := simpleApp4f689FirebaseAdminsdk4esrk11f23bc586JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "simple-app-4f689-firebase-adminsdk-4esrk-11f23bc586.json", size: 2349, mode: os.FileMode(436), modTime: time.Unix(1677963400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"simple-app-4f689-firebase-adminsdk-4esrk-11f23bc586.json": simpleApp4f689FirebaseAdminsdk4esrk11f23bc586Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"simple-app-4f689-firebase-adminsdk-4esrk-11f23bc586.json": &bintree{simpleApp4f689FirebaseAdminsdk4esrk11f23bc586Json, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
